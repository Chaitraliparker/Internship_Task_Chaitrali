Internship task 5 

Create Database Zomato;

Restaurants Table:
CREATE TABLE restaurants(restaurant_id INT Primary Key,
                         name VARCHAR(100) not null,
                         city VARCHAR(100) not null,
                         cuisineType VARCHAR(50) not null,
                         Rating INT ,
                         averageCostfortwo INT);

INSERT INTO restaurants (restaurant_id, name, city, cuisineType, Rating, averageCostfortwo)
VALUES
    (301, 'Tasty Bites', 'Mumbai', 'Italian', 4, 40),
    (302, 'Spicy Sizzle', 'Indore', 'Indian', 5, 35),
    (303, 'Sushi Haven', 'San Francisco', 'Japanese', 4, 50),
    (304, 'Ocean Grill', 'Los Angeles', 'Seafood', 3, 60),
    (305, 'Burgers & Fries', 'Miami', 'American', 4, 25),
    (306, 'Pasta Paradise', 'Mumbai', 'Italian', 4.5, 45),
    (307, 'Curry Corner', 'Houston', 'Indian', 4, 30),
    (308, 'Taco Delights', 'Nagpur', 'Mexican', 6, 20),
    (309, 'Veggie World', 'Bhopal', 'Vegetarian', 4, 40),
    (310, 'Steakhouse Deluxe', 'Jabalpur', 'Vegetarian', 7, 80);



Customers Table:
CREATE TABLE customers(customer_id INT PRIMARY KEY,
                     first_name VARCHAR(100) not null,
                     last_name VARCHAR(100) not null,
                     phone INT not null,
                     city VARCHAR(50) not null,
                   joindate Date);

INSERT INTO customers(customer_id, first_name, last_name,  phone, city,  joindate) VALUES(601,'Mahendra','Singh',9999654323 ,'Indore',2019-07-06),
(602,'Gautam','pal',8888654323,'Indore','2019-08-15'),
(603,'Nikhil','Sharma',6967654323,'Indore','2020-03-19'),
(604,'keshav','Sharma',7988657323,'Indore','2020-12-9'),
(605,'Surendra','Gupta',9988654323,'Indore','2019-11-11'),
(606,'Suresh','Verma',7988654323,'Bhopal','2020-11-10'),
(607,'Mahesh','Pal',9977654323,'Indore','2018-10-14'),
(608,'Mukul','Nair',9966654323,'Ujjain','2019-09-11'),
(609,'Rachit','Thakur',9988654323,'Rewa','2019-11-17'),
(610,'Jitendra','Gupta',9988653323,'Indore','2019-10-11');

Orders Table:
Create Table orders(order_id INT Primary Key,
                      order_date DATE,
                     order_amount DECIMAL(10,2) not null ,
                     order_status VARCHAR(20) not null,
                     customer_id INT,
                     restaurant_id INT,
                     Foreign Key(customer_id)References customers(customer_id),
                     Foreign Key(restaurant_id)References restaurants(restaurant_id));

INSERT INTO orders (order_id, order_date, order_amount, order_status, customer_id, restaurant_id) VALUES
(1001, '2025-04-01', 450.50, 'completed', 601, 301),
(1002, '2025-04-02', 799.00, 'pending', 602, 302),
(1003, '2021-04-03', 299.99, 'completed', 603, 303),
(1004, '2021-04-04', 199.00, 'cancelled', 604, 304),
(1005, '2025-04-05', 999.00, 'completed', 605, 305),
(1006, '2025-04-06', 659.00, 'completed', 606, 306),
(1007, '2025-04-07', 899.99, 'pending', 607, 307),
(1008, '2021-04-08', 749.00, 'completed', 608, 308),
(1009, '2025-04-09', 349.00, 'processing', 609, 309),
(1010, '2021-04-10', 499.00, 'completed', 610, 310);




Reviews Table:
Create Table reviews(review_id INT Primary Key,
                      review_date DATE,
                     comment VARCHAR(100) not null ,
                     rating INT not null,
                     customer_id INT,
                     restaurant_id INT,
                     Foreign Key(customer_id)References customers(customer_id),
                     Foreign Key(restaurant_id)References restaurants(restaurant_id));

INSERT INTO reviews (review_id, review_date, comment, rating, customer_id, restaurant_id) VALUES
(1, '2025-04-01', 'Great experience! The pasta was delicious.', 5, 601, 301),
(2, '2025-04-02', 'Good food, but the service was slow.', 3, 602, 302),
(3, '2025-04-03', 'Amazing sushi! Highly recommend this place.', 5, 603, 303),
(4, '2025-04-04', 'The seafood was fresh, but the ambiance could improve.', 4, 604, 304),
(5, '2025-04-05', 'Excellent burgers and fries! Loved the vibe.', 5, 605, 305),
(6, '2025-04-06', 'Pasta was okay, nothing special.', 3, 606, 306),
(7, '2025-04-07', 'I loved the Indian food here. Definitely will return.', 5, 607, 307),
(8, '2025-04-08', 'The tacos were great, but the place was too crowded.', 4, 608, 308),
(9, '2025-04-09', 'Vegetarian food was good, but a bit overpriced.', 3, 609, 309),
(10, '2025-04-10', 'Delicious vegetarian food, will come back soon!', 5, 610, 310);



Payments Table:
Create Table payments(payment_id INT Primary Key,
                      payment_date DATE,
                     payment_amount DECIMAL(10,2) not null ,
                     payment_method VARCHAR(20) not null,
                     order_id INT,
                     Foreign Key(order_id)References orders(order_id));

INSERT INTO payments (payment_id, payment_date, payment_amount, payment_method, order_id) VALUES
(1, '2025-04-01', 5999.00, 'Cash', 1001),
(2, '2025-04-02', 1999.00, 'Card', 1002),
(3, '2025-04-03', 2999.00, 'UPI', 1003),
(4, '2025-04-04', 1499.00, 'Cash', 1004),
(5, '2025-04-05', 2499.00, 'Card', 1005),
(6, '2025-04-06', 3999.00, 'Cash', 1006),
(7, '2025-04-07', 4499.00, 'Card', 1007),
(8, '2025-04-08', 3499.00, 'UPI', 1008),
(9, '2025-04-09', 1999.00, 'Cash', 1009),
(10, '2025-04-10', 5499.00, 'Card', 1010);


1. Retrieve the names and locations of restaurants witrh a rating of 4.5 and higher
SELECT name, city,rating
FROM restaurants
WHERE rating >= 4.5;


2. find the total number of orders placed by each customer
SELECT customer_id, COUNT(*) AS total_orders
FROM orders
GROUP BY customer_id;


3.List of all restuarants offering "Italaian " cuisine in"Mumbai"
SELECT name,city,cuisineType
FROM restaurants
WHERE cuisineType = 'Italian' AND city = 'Mumbai';


4. Calculate the total revenue generated by each restaurant from completed orders
SELECT r.name AS restaurant_name, SUM(o.order_amount) AS total_revenue
FROM restaurants r
JOIN orders o ON r.restaurant_id = o.restaurant_id
WHERE o.order_status = 'Completed'
GROUP BY r.restaurant_id, r.name;


5. Retrieve the most recent order placed by each customer.
SELECT o.customer_id, c.first_name, c.last_name, o.order_id, o.order_date, o.order_amount, o.order_status
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
WHERE o.order_date = (
    SELECT MAX(order_date)
    FROM orders
    WHERE customer_id = o.customer_id
);


7. Identify the most reviewed restaurants.
SELECT r.restaurant_id, r.name, r.city, r.cuisineType, COUNT(re.review_id) AS review_count
FROM restaurants r
JOIN reviews re ON r.restaurant_id = re.restaurant_id
GROUP BY r.restaurant_id
ORDER BY review_count DESC;

 

6. List customers who have not placed any orders yet.
SELECT c.customer_id, c.first_name, c.last_name, c.phone, c.city
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;



8.Find the most preferred payment method.
SELECT payment_method, COUNT(*) AS method_count
FROM payments
GROUP BY payment_method
ORDER BY method_count DESC
LIMIT 1;
 

9. List the top 5 restaurants by total revenue.
SELECT r.restaurant_id, r.name, r.city, r.cuisineType, SUM(p.payment_amount) AS total_revenue
FROM restaurants r
JOIN orders o ON r.restaurant_id = o.restaurant_id
JOIN payments p ON o.order_id = p.order_id
GROUP BY r.restaurant_id
ORDER BY total_revenue DESC
LIMIT 5;


10. Show the details of all cancelled orders along with the customer's and restaurant's names.
SELECT o.order_id,
    o.order_date,
    o.order_amount,
    o.order_status,
    c.first_name AS customer_first_name,
    c.last_name AS customer_last_name,
    r.name AS restaurant_name
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN restaurants r ON o.restaurant_id = r.restaurant_id
WHERE o.order_status = 'cancelled';










